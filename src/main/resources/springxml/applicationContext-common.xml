<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd"
	>
	
	<!-- Spring的配置文件的核心点（数据源，与mybatis的整合，事务控制） -->
	
	<!-- 扫描除了控制器之外的所有类 -->
	<context:component-scan base-package="com.demo">
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
	</context:component-scan>
	<!-- 数据源 -->
	<context:property-placeholder location="classpath:config/db/jdbc.properties"/>
	<bean id="datasource" class="com.alibaba.druid.pool.DruidDataSource">
		<property name="url" value="${jdbc.jdbcUrl}"></property>
		<property name="driverClassName" value="${jdbc.driverClass}"></property>
		<property name="username" value="${jdbc.uername}"></property>
		<property name="password" value="${jdbc.password}"></property>
	</bean>
	
	<!-- 配置和Mybatis的整合 -->
	<bean id="sqlSessionFactoryBean" class="org.mybatis.spring.SqlSessionFactoryBean">
		<!-- 指定mybatis全局配置文件的位置 -->
		<property name="configLocation" value="classpath:config/db/mybatis.xml"></property>
		<!-- 数据源 -->
		<property name="dataSource" ref="datasource"></property>
		<!-- 指定mybatis，mapper文件的位置  也可以在mybatis.xml中指定 mapper标签 -->
		<property name="mapperLocations" value="classpath:mapper/*.xml"></property>
	</bean>
	
	<!-- 配置扫描器，将mybatis接口的实现加入到IOC容器中 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<!-- 扫描所有的dao接口实现，加入IOC容器中 -->
		<property name="basePackage" value="com.demo.ssm.dao"></property>
	</bean>
	
	<!-- jdbc配置事务管理器 -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <!-- 控制数据源 -->
        <property name="dataSource" ref="datasource"></property>
    </bean>
    <!-- 开启基于注解的事务，使用xml配置形式的事务（使用声明式事务）transaction-manager 指定事务管理器 -->
    <tx:annotation-driven transaction-manager="transactionManager"/>
    <!-- 配置哪些类的方法需要进行事务管理 -->
    <aop:config proxy-target-class="true">
    	<!-- 切入点表达式 -->
		<aop:pointcut expression="execution(* com.demo..service..*.*(..))" id="txPoint"/>
        <!-- 配置事务增强 -->
        <aop:advisor advice-ref="txadvice" pointcut-ref="txPoint"/>
    </aop:config>
    <!-- jdbc配置事务传播特性，即配置事务增强，事务如何切入 -->
    <tx:advice id="txadvice" transaction-manager="transactionManager">
        <tx:attributes>
        	<!-- 所有方法都是事务方法 -->
  			<tx:method name="add*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
            <tx:method name="remove*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
            <tx:method name="modify*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
            <tx:method name="import*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
            <tx:method name="check*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
            <tx:method name="exec*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
            <tx:method name="find*" read-only="true"/>
            <tx:method name="is*" read-only="true"/>
            <tx:method name="export*" read-only="true"/>
            <tx:method name="get*" read-only="true"/>
        </tx:attributes>
    </tx:advice>
    
</beans>